<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.28"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TREE_NAME</name>
          <description>htsat@Jenkins-server:/var/lib/jenkins/jobs/open-estuary/workspace/local/open-estuary/build/D02</description>
          <defaultValue>open-estuary</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_PLATFORM</name>
          <description></description>
          <defaultValue>D02 D03</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_DISTRO</name>
          <description></description>
          <defaultValue>Ubuntu OpenSuse Fedora Debian CentOS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARCH_MAP</name>
          <description></description>
          <defaultValue>d02 arm64 d03 arm64</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOOT_PLAN</name>
          <description></description>
          <defaultValue>boot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_PLAN</name>
          <description></description>
          <defaultValue>WEEKLY_TESTING BOOT_NFS BOOT_ESL BOOT_NORFLASH BOOT_PXE PERF_TESTING</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>USER</name>
          <description></description>
          <defaultValue>htsat</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HOST</name>
          <description></description>
          <defaultValue>192.168.3.100</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.3.100:8089/RPC2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_USER</name>
          <description></description>
          <defaultValue>default</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_STREAM</name>
          <description></description>
          <defaultValue>/anonymous/default/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_TOKEN</name>
          <description></description>
          <defaultValue>g43y0wtyi0m2ua7in3xtfch1m2s1dd0k97ac1fqqhqd0qblimtehqkwk8mjimsyh0jczrnaibdlb23mtn17qca6i14tcl27h7md580za5p8w81fl035b6bk1ybw26lle</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.3.100:8888</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name> KERNELCI_TOKEN</name>
          <description></description>
          <defaultValue>3eda8013-da37-42ea-b9a0-7a66badd1b68</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.3.100:8083</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_DIR</name>
          <description></description>
          <defaultValue>/var/www/images/kernel-ci</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TFTP_DIR</name>
          <description></description>
          <defaultValue>/var/lib/tftpboot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PACKAGES</name>
          <description></description>
          <defaultValue>armor lamp mysql odp docker docker_apps</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SETUP_TYPE</name>
          <description></description>
          <defaultValue>iso usb pxe</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.5.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/open-estuary/ci-scripts.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>local/ci-scripts</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <depth>0</depth>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set -x

if [ ! -e opt ]; then
	mkdir opt
fi

cd opt

if [ ! -e gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz ]; then
	wget -q -c https://releases.linaro.org/15.02/components/toolchain/binaries/aarch64-linux-gnu/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
	tar -Jxf gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
else
    if [ ! -e gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu ]; then
        tar -Jxf gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
    fi
fi

cd ..

CI_SCRIPTS_DIR=${WORKSPACE}/local/ci-scripts
pushd ${CI_SCRIPTS_DIR}/boot-app-scripts    # change current work directory

: ${SHELL_PLATFORM:=`python parameter_parser.py -f config.yaml -s Build -k Platform`}
: ${SHELL_DISTRO:=`python parameter_parser.py -f config.yaml -s Build -k Distro`}

: ${BOOT_PLAN:=`python parameter_parser.py -f config.yaml -s Jenkins -k Boot`}
: ${APP_PLAN:=`python parameter_parser.py -f config.yaml -s Jenkins -k App`}

: ${USER:=`python parameter_parser.py -f config.yaml -s LAVA -k USER`}
: ${HOST:=`python parameter_parser.py -f config.yaml -s LAVA -k HOST`}

: ${LAVA_SERVER:=`python parameter_parser.py -f config.yaml -s LAVA -k lavaserver`}
: ${LAVA_USER:=`python parameter_parser.py -f config.yaml -s LAVA -k lavauser`}
: ${LAVA_STREAM:=`python parameter_parser.py -f config.yaml -s LAVA -k lavastream`}
: ${LAVA_TOKEN:=`python parameter_parser.py -f config.yaml -s LAVA -k TOKEN`}

: ${KERNELCI_SERVER:=`python parameter_parser.py -f config.yaml -s Kernelci -k server`}
: ${KERNELCI_TOKEN:=`python parameter_parser.py -f config.yaml -s Kernelci -k token`}

: ${FTP_SERVER:=`python parameter_parser.py -f config.yaml -s Kernelci -k ftpserver`}

echo $ARCH_MAP
: ${ARCH_MAP:=`python parameter_parser.py -f config.yaml -s Arch`}
echo $ARCH_MAP

popd    # restore current work directory

echo $GIT_DESCRIBE
cat &lt;&lt; EOF &gt; ${WORKSPACE}/env.properties
GIT_DESCRIBE=$GIT_DESCRIBE
EXECUTE_STATUS=&quot;Failure&quot;
SHELL_PLATFORM=$SHELL_PLATFORM
SHELL_DISTRO=$SHELL_DISTRO
BOOT_PLAN=$BOOT_PLAN
APP_PLAN=$APP_PLAN
USER=$USER
HOST=$HOST
LAVA_SERVER=$LAVA_SERVER
LAVA_USER=$LAVA_USER
LAVA_STREAM=$LAVA_STREAM
LAVA_TOKEN=$LAVA_TOKEN
KERNELCI_SERVER=$KERNELCI_SERVER
KERNELCI_TOKEN=$KERNELCI_TOKEN
FTP_SERVER=$FTP_SERVER
ARCH_MAP=$ARCH_MAP
TFTP_DIR=$TFTP_DIR
EOF

cat ${WORKSPACE}/env.properties
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@1.92.1">
      <info>
        <propertiesFilePath>env.properties</propertiesFilePath>
        <propertiesContent>LANG=C
PATH=${WORKSPACE}/opt/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu/bin:${WORKSPACE}/local/ci-scripts/build-scripts:$PATH</propertiesContent>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

function build_image_for_sata()
{
    image_dir=${BUILD_DIR}/$1
    defconfig_file=arch/arm64/configs/defconfig
    dts_file=arch/arm64/boot/dts/hisilicon/hip05-d02.dts

    pushd ${OPEN_ESTUARY_DIR}/kernel

    if [ -f ${defconfig_file}_bk ]; then
    	rm -fr ${defconfig_file}
        mv ${defconfig_file}_bk  ${defconfig_file}
    fi

    if [ -f ${dts_file}_bk ]; then
    	rm -fr ${dts_file}
        mv ${dts_file}_bk  ${dts_file}
    fi

    cp ${defconfig_file} ${defconfig_file}_bk
    cp ${dts_file} ${dts_file}_bk

    sed -i &apos;s/CONFIG_SATA_MV=m/CONFIG_SATA_MV=y/g&apos; ${defconfig_file}
    SATA_BOOT=&quot;rdinit=/init root=/dev/sda2 rootdelay=10 rootfstype=ext4 rw console=ttyS0,115200 earlycon=uart8250,mmio32,0x80300000 ip=dhcp&quot;
    SAS_BOOT=&quot;earlycon=uart8250,mmio32,0x80300000 console=ttyS0,115200 initrd=0x7000000,350M&quot;
    sed -i &quot;s#$SAS_BOOT#$SATA_BOOT#g&quot;  ${dts_file}

	make defconfig
    make -j $CPU_NUM
    cp ./arch/arm64/boot/Image ${image_dir}/Image-sata
    cp ./arch/arm64/boot/dts/hisilicon/hip05-d02.dtb ${image_dir}/hip05-d02-sata.dtb

    make clean
    rm -f ${dts_file} &amp;&amp; mv ${dts_file}_bk ${dts_file}
    rm -f ${defconfig_file} &amp;&amp; mv ${defconfig_file}_bk ${defconfig_file}

    popd
}

function print_time()
{
	echo  $@ `date &quot;+%Y-%m-%d %H:%M:%S&quot;` &gt;&gt; $timefile
}

set -x

export ARCH=arm64
export CROSS_COMPILE=${WORKSPACE}/opt/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
export

CPU_NUM=$(cat /proc/cpuinfo | grep processor | wc -l)
CI_SCRIPTS_DIR=${WORKSPACE}/local/ci-scripts
OPEN_ESTUARY_DIR=${WORKSPACE}/local/open-estuary
BUILD_DIR=${OPEN_ESTUARY_DIR}/build
ESTUARY_CFG_FILE=${OPEN_ESTUARY_DIR}/estuary/estuarycfg.json

###################### timestamp file #########################
timefile=${WORKSPACE}/timestamp.log
if [ -f $timefile ]; then
	rm -fr $timefile
else
	touch $timefile
fi

print_time &quot;the begin time is &quot;

###################### prepare repo tool ######################
if [ ! -e bin ]; then
	mkdir -p bin;
	wget -c http://www.open-estuary.com/EstuaryDownloads/tools/repo -O bin/repo
	chmod a+x bin/repo;
fi

export PATH=${WORKSPACE}/bin:$PATH;

############## get the newest content of git repos ############
if [ ! -e $OPEN_ESTUARY_DIR ]; then
	mkdir -p $OPEN_ESTUARY_DIR;
fi

pushd $OPEN_ESTUARY_DIR;    # enter OPEN_ESTUARY_DIR

# sync and checkout files from repo
repo abandon master
repo forall -c git reset --hard
repo forall -c git clean -dxf

if [ &quot;$VERSION&quot;x != &quot;&quot;x ]; then
	repo init -u &quot;https://github.com/open-estuary/estuary.git&quot; -b refs/tags/$VERSION --no-repo-verify --repo-url=git://android.git.linaro.org/tools/repo
else
	repo init -u &quot;https://github.com/open-estuary/estuary.git&quot; -b master --no-repo-verify --repo-url=git://android.git.linaro.org/tools/repo
fi

false; while [ $? -ne 0 ]; do repo sync --force-sync --fetch-submodules; done
repo start master --all
repo status

print_time &quot;the end time of finishing downloading estuary is &quot;

############## execute estuary build #####################

BUILD_CFG_FILE=/tmp/estuarycfg.json
cp $ESTUARY_CFG_FILE $BUILD_CFG_FILE

# Set all platforms support to &quot;no&quot;
sed -i -e &apos;/platform/s/yes/no/&apos; $BUILD_CFG_FILE

# Make platforms supported to &quot;yes&quot;
echo $SHELL_PLATFORM
for PLATFORM in $SHELL_PLATFORM
do
	sed -i -e &quot;/$PLATFORM/s/no/yes/&quot; $BUILD_CFG_FILE
done

# Set all distros support to &quot;no&quot;
distros=(Ubuntu OpenSuse Fedora Debian CentOS Rancher)
for ((i=0; i&lt;${#distros[@]}; i++))
do
	sed -i -e &quot;/${distros[$i]}/s/yes/no/&quot; $BUILD_CFG_FILE
done

# Make distros supported to &quot;yes&quot;
echo $SHELL_DISTRO
for DISTRO in $SHELL_DISTRO
do
	sed -i -e &quot;/$DISTRO/s/no/yes/&quot; $BUILD_CFG_FILE
done

# Set all packages supported to yes
echo $PACKAGES
for package in $PACKAGES
do
	sed -i -e &quot;/${package}/s/no/yes/&quot; $BUILD_CFG_FILE
done

# Set all setup types supported to &quot;no&quot;
echo $SETUP_TYPE
for setuptype in $SETUP_TYPE
do
	sed -i -e &quot;/${setuptype}/s/yes/no/&quot; $BUILD_CFG_FILE
done

cat $BUILD_CFG_FILE

# Execute build
./estuary/build.sh --file=$BUILD_CFG_FILE --builddir=$BUILD_DIR
if [ $? -ne 0 ]; then
	echo &quot;estuary build failed!&quot;
	exit -1
fi

print_time &quot;the end time of estuary build is &quot;

############## get the GIT_DESCRIBE ######################
if [ &quot;$VERSION&quot;x != &quot;&quot;x ]; then
	GIT_DESCRIBE=$VERSION
else
	#### get uefi commit
	pushd uefi
	UEFI_GIT_DESCRIBE=$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
    UEFI_GIT_DESCRIBE=uefi_${UEFI_GIT_DESCRIBE:0:7}
	popd

	#### get kernel commit
	pushd kernel
	KERNEL_GIT_DESCRIBE=$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
    KERNEL_GIT_DESCRIBE=kernel_${KERNEL_GIT_DESCRIBE:0:7}
	popd

	#### get grub commit
	pushd grub
	GURB_GIT_DESCRIBE=$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
    GURB_GIT_DESCRIBE=grub_${GURB_GIT_DESCRIBE:0:7}
	popd

	GIT_DESCRIBE=${UEFI_GIT_DESCRIBE}_${GURB_GIT_DESCRIBE}_${KERNEL_GIT_DESCRIBE}
fi

echo $GIT_DESCRIBE

#################### copy build files to the $GIT_DESCRIBE directory ###########################
DEPLOY_UTILS_FILE=deploy-utils.tar.bz2
MINI_ROOTFS_FILE=mini-rootfs.cpio.gz
GRUB_IMG_FILE=grubaa64.efi
GRUB_CFG_FILE=grub.cfg
KERNEL_IMG_FILE=Image
TOOLCHAIN_FILE=gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz

DES_DIR=$FTP_DIR/$TREE_NAME/$GIT_DESCRIBE
[ -d $DES_DIR ] &amp;&amp; sudo rm -rf $DES_DIR
sudo mkdir -p $DES_DIR

sudo cp $timefile $DES_DIR

read -a arch_map &lt;&lt;&lt; $(echo $ARCH_MAP)
declare -A arch
for((i=0; i&lt;${#arch_map[@]}; i++))
do
    if ((i%2==0)); then
        j=`expr $i+1`
        arch[${arch_map[$i]}]=${arch_map[$j]}
    fi
done

ls -l $BUILD_DIR
pushd $BUILD_DIR  # enter BUILD_DIR

# copy arch files
pushd binary
for arch_dir in arm*;
do
    sudo mkdir -p $DES_DIR/$arch_dir
    sudo cp $arch_dir/* $DES_DIR/$arch_dir
done
popd

# copy platfom files
for PLATFORM in $SHELL_PLATFORM
do
    echo $PLATFORM

    if [ x&quot;$PLATFORM&quot; = x&quot;D02&quot; ]; then
        sata_image_dir=sata_image
        [ -d $sata_image_dir ] &amp;&amp; rm -fr $sata_image_dir
        mkdir $sata_image_dir

        build_image_for_sata $sata_image_dir
        if [ x&quot;`ls -A $sata_image_dir`&quot; = x&quot;&quot; ]; then
            echo &quot;compiling the sata booting image error&quot;
            exit -1
        else
            [ -d binary/$PLATFORM/$sata_image_dir ] &amp;&amp; rm -fr binary/$PLATFORM/$sata_image_dir
            mv $sata_image_dir binary/$PLATFORM/
        fi
    fi

	PLATFORM_L=&quot;$(echo $PLATFORM | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)&quot;
    PLATFORM_ARCH_DIR=$DES_DIR/${PLATFORM_L}-${arch[$PLATFORM_L]}
    [ -d $PLATFORM_ARCH_DIR ] &amp;&amp; sudo rm -fr $PLATFORM_ARCH_DIR
    sudo mkdir -p ${PLATFORM_ARCH_DIR}/{binary,toolchain,distro}

    # copy toolchain files
    pushd $PLATFORM_ARCH_DIR/toolchain
    sudo ln -s ../../${arch[$PLATFORM_L]}/$TOOLCHAIN_FILE
    popd

    # copy binary files
    sudo find binary/$PLATFORM/ -type l -exec rm {} \; # remove symlinks
    sudo cp -rf binary/$PLATFORM/* $PLATFORM_ARCH_DIR/binary

    pushd $PLATFORM_ARCH_DIR/binary
    sudo ln -s ../../${arch[$PLATFORM_L]}/$KERNEL_IMG_FILE ${KERNEL_IMG_FILE}_${PLATFORM}
    sudo ln -s ../../${arch[$PLATFORM_L]}/$DEPLOY_UTILS_FILE
    sudo ln -s ../../${arch[$PLATFORM_L]}/$MINI_ROOTFS_FILE
    sudo ln -s ../../${arch[$PLATFORM_L]}/$GRUB_IMG_FILE
    sudo ln -s ../../${arch[$PLATFORM_L]}/$GRUB_CFG_FILE
    popd

    # copy distro files
	for DISTRO in $SHELL_DISTRO
    do
        echo $DISTRO

        pushd ${CI_SCRIPTS_DIR}/boot-app-scripts
        distro_tar_name=`python parameter_parser.py -f config.yaml -s DISTRO -k $PLATFORM -v $DISTRO`
        popd

        if [ x&quot;$distro_tar_name&quot; = x&quot;&quot; ]; then
        	continue
        fi

        echo $distro_tar_name

        pushd $DES_DIR/${arch[$PLATFORM_L]}
        [ ! -f ${distro_tar_name}.sum ] &amp;&amp; sudo sh -c &quot;md5sum $distro_tar_name &gt; ${distro_tar_name}.sum&quot;
        popd

        pushd $PLATFORM_ARCH_DIR/distro
        sudo ln -s ../../${arch[$PLATFORM_L]}/$distro_tar_name
        sudo ln -s ../../${arch[$PLATFORM_L]}/$distro_tar_name.sum
        popd
    done
done

popd  # leave BUILD_DIR
sudo rm -fr $BUILD_DIR

popd  # leave OPEN_ESTUARY_DIR

################### save env variables #############################
cat &lt;&lt; EOF &gt; ${WORKSPACE}/env.properties
GIT_DESCRIBE=$GIT_DESCRIBE
SHELL_PLATFORM=$SHELL_PLATFORM
SHELL_DISTRO=$SHELL_DISTRO
BOOT_PLAN=$BOOT_PLAN
APP_PLAN=$APP_PLAN
USER=$USER
HOST=$HOST
LAVA_SERVER=$LAVA_SERVER
LAVA_USER=$LAVA_USER
LAVA_STREAM=$LAVA_STREAM
LAVA_TOKEN=$LAVA_TOKEN
KERNELCI_SERVER=$KERNELCI_SERVER
KERNELCI_TOKEN=$KERNELCI_TOKEN
FTP_SERVER=$FTP_SERVER
ARCH_MAP=$ARCH_MAP
TFTP_DIR=$TFTP_DIR
EOF

cat ${WORKSPACE}/env.properties

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.44">
      <recipientList>1124281517@qq.com, fanghuangcai@163.com,  shuangshengchen@qq.com, gu_an_he@163.com, chenshuangsheng@huawei.com, lixiaoping3@huawei.com, zhaojunhua@hisilicon.com, wu.wu@hisilicon.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
        <hudson.plugins.emailext.plugins.trigger.AbortedTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.AbortedTrigger>
      </configuredTriggers>
      <contentType>text/plain</contentType>
      <defaultSubject>Estuary Build - ${GIT_DESCRIBE} - ${BUILD_STATUS}</defaultSubject>
      <defaultContent>project name: ${PROJECT_NAME}
Version: ${GIT_DESCRIBE}
Buils Status: ${BUILD_STATUS}
Trigger Reason: ${CAUSE}
The Build Log Address: ${BUILD_URL}console
The Build Address: $BUILD_URL
The Build Binaries Address: http://114.119.4.74:8083/open-estuary/${GIT_DESCRIBE}

Test timestamp is below:
${FILE,path=&quot;timestamp.log&quot;}</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.31">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>${WORKSPACE}/env.properties</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>estuary-build-complete</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.3"/>
  </buildWrappers>
</project>

