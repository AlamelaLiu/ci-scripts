<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.28"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ARCH_LIST</name>
          <description></description>
          <defaultValue>arm64</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TREE</name>
          <description></description>
          <defaultValue>https://github.com/open-estuary/kernel.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TREE_NAME</name>
          <description>htsat@Jenkins-server:/var/lib/jenkins/jobs/open-estuary/workspace/local/open-estuary/build/D02</description>
          <defaultValue>open-estuary</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COMMIT_ID</name>
          <description>Optional: checkout this commit instead of the branch name.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_PLATFORM</name>
          <description></description>
          <defaultValue>D02</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_DISTRO</name>
          <description></description>
          <defaultValue>Ubuntu</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOOT_PLAN</name>
          <description></description>
          <defaultValue>boot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_PLAN</name>
          <description></description>
          <defaultValue>WEEKLY_TESTING</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>USER</name>
          <description></description>
          <defaultValue>htsat</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HOST</name>
          <description></description>
          <defaultValue>192.168.1.106</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.1.106/RPC2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_USER</name>
          <description></description>
          <defaultValue>default</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_STREAM</name>
          <description></description>
          <defaultValue>/anonymous/default/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_TOKEN</name>
          <description></description>
          <defaultValue>p53l26plbujbqaicsrkw0i1u3xu5qawxlx3imr41w3eiwg1y79jxtjkx209p2kccsc1obzy279c7ruydhskzotdlf6s3me0wb87o0rf71m0sehetlje9p0cr0dorkhf8</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_TOKEN</name>
          <description></description>
          <defaultValue>3eda8013-da37-42ea-b9a0-7a66badd1b68</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.1.108:8888/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.1.108:8083</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARCH_MAP</name>
          <description></description>
          <defaultValue>d03 arm64 d02 arm64 d01 arm32</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TFTP_DIR</name>
          <description></description>
          <defaultValue>/var/lib/tftpboot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_DIR</name>
          <description></description>
          <defaultValue>/var/www/images/kernel-ci</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/open-estuary/ci-scripts.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>local/estuary_test</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <reference></reference>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
set -e

if [ ! -e opt ]; then
  mkdir opt
fi

if [ ! -e opt/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz ]; then
  cd opt
  wget -q -c https://releases.linaro.org/15.02/components/toolchain/binaries/aarch64-linux-gnu/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
  tar -Jxf gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
  cd ..
fi

cd local</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@1.92.1">
      <info>
        <propertiesFilePath>env.properties</propertiesFilePath>
        <propertiesContent>ARCH=$ARCH_LIST
LANG=C
PATH=${WORKSPACE}/opt/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu/bin:$WORKSPACE/local/build-scripts:$PATH</propertiesContent>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set -x
cd ${WORKSPACE}

cd local/estuary_test/boot-app-scripts
: ${SHELL_PLATFORM:=`python parameter_parser.py -f config.yaml -s Build -k Platform`}
: ${SHELL_DISTRO:=`python parameter_parser.py -f config.yaml -s Build -k Distro`}

: ${BOOT_PLAN:=`python parameter_parser.py -f config.yaml -s Jenkins -k Boot`}
: ${APP_PLAN:=`python parameter_parser.py -f config.yaml -s Jenkins -k App`}

: ${USER:=`python parameter_parser.py -f config.yaml -s LAVA -k USER`}
: ${HOST:=`python parameter_parser.py -f config.yaml -s LAVA -k HOST`}
: ${LAVA_SERVER:=`python parameter_parser.py -f config.yaml -s LAVA -k lavaserver`}
: ${LAVA_USER:=`python parameter_parser.py -f config.yaml -s LAVA -k lavauser`}
: ${LAVA_STREAM:=`python parameter_parser.py -f config.yaml -s LAVA -k lavastream`}
: ${LAVA_TOKEN:=`python parameter_parser.py -f config.yaml -s LAVA -k TOKEN`}

: ${KERNELCI_SERVER:=`python parameter_parser.py -f config.yaml -s Kernelci -k server`}
: ${KERNELCI_TOKEN:=`python parameter_parser.py -f config.yaml -s Kernelci -k token`}
: ${FTP_SERVER:=`python parameter_parser.py -f config.yaml -s Kernelci -k ftpserver`}

echo $ARCH_MAP
: ${ARCH_MAP:=`python parameter_parser.py -f config.yaml -s Arch`}
echo $ARCH_MAP

cd ${WORKSPACE}

#set -e

if [ ! -e bin ]; then 
	mkdir -p bin;
	wget -c http://www.open-estuary.com/EstuaryDownloads/tools/repo -O bin/repo
	chmod a+x bin/repo; 
fi 

# get the newest content of git repos
export PATH=${WORKSPACE}/bin:$PATH; 
if [ ! -e local/open-estuary ]; then
	mkdir -p local/open-estuary; 
fi
if [ -e local/open-estuary ]; then
	cd local/open-estuary;
    repo abandon master
    repo forall -c git reset --hard
    if [ &quot;$VERSION&quot;x != &quot;&quot;x ]; then
		repo init -u &quot;https://github.com/open-estuary/estuary.git&quot; -b refs/tags/$VERSION --no-repo-verify --repo-url=git://android.git.linaro.org/tools/repo
    else
		repo init -u &quot;https://github.com/open-estuary/estuary.git&quot; -b master --no-repo-verify --repo-url=git://android.git.linaro.org/tools/repo
    fi		
    false; while [ $? -ne 0 ]; do repo sync; done
	repo start master --all
    cd ../..
fi

echo $PWD

cd local/open-estuary


############## get the GIT_DESCRIBE ######################
if [ &quot;$VERSION&quot;x = &quot;&quot;x ]; then
	#### get uefi commit
	pushd uefi
	UEFI_GIT_DESCRIBE=&apos;uefi_&apos;$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
	popd
	#### get kernel commit
	pushd kernel
	KERNEL_GIT_DESCRIBE=&apos;kernel_&apos;$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
	popd
	#### get grub commit 
	pushd grub
	GURB_GIT_DESCRIBE=&apos;grub_&apos;$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
	popd

	GIT_DESCRIBE=$UEFI_GIT_DESCRIBE&quot;_&quot;$GURB_GIT_DESCRIBE&quot;_&quot;$KERNEL_GIT_DESCRIBE
else
	GIT_DESCRIBE=$VERSION
fi


if [ -d $GIT_DESCRIBE ]; then
	sudo rm -fr $GIT_DESCRIBE
fi
mkdir $GIT_DESCRIBE

set -e

echo $SHELL_DISTRO

read -a arch &lt;&lt;&lt; $(echo $ARCH_MAP)
declare -A dict
for((i=0; i&lt;${#arch[@]}; i++))
do
    if ((i%2==0)); then
        j=`expr $i+1`
        dict[${arch[$i]}]=${arch[$j]}
    fi      
done

for PLATFORM in $SHELL_PLATFORM
do
	for DISTRO in $SHELL_DISTRO
    do
    	echo $PLATFORM
        echo $DISTRO
		./estuary/build.sh -p $PLATFORM -d $DISTRO
		if [ $? -ne 0 ]; then
			exit -1
		fi
        
     	 # delete the link file in the build/$PLATFORM
     	 set -x
     	 delete_file=$(ls -l ./build/$PLATFORM/binary | grep &quot;\-&gt;&quot; | awk &apos;{print $9}&apos;)
     	 echo $delete_file
      
     	 declare -a del_arr
    	 read -a del_arr &lt;&lt;&lt; $(echo $delete_file)
      
    	  for j in ${del_arr[@]}
    	  do
    	      sudo rm -fr ./build/$PLATFORM/binary/$j 
   	  	done
      
      	# move the build file to the $GIT_DESCRIBE file
      	ls -l build
      
      	if [ ! -d $GIT_DESCRIBE/binary ]; then
      		#sudo mv build/$PLATFORM/binary  $GIT_DESCRIBE
        	sudo cp -r build/$PLATFORM/binary  $GIT_DESCRIBE
      	fi
      	if [ ! -d $GIT_DESCRIBE/toolchain ]; then
        	#sudo mv build/$PLATFORM/toolchain  $GIT_DESCRIBE
      	  	sudo cp -r build/$PLATFORM/toolchain  $GIT_DESCRIBE
      	fi
      	if [ ! -d $GIT_DESCRIBE/distro ]; then
      		sudo mkdir $GIT_DESCRIBE/distro
      	fi
      	sudo cp distro/$DISTRO*.tar.gz*  $GIT_DESCRIBE/distro
    done
    PLATFORM=&quot;$(echo $PLATFORM | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)&quot;
    echo ${dict[$PLATFORM]}
    DES_DIR=$FTP_DIR/$TREE_NAME/$GIT_DESCRIBE/$PLATFORM-${dict[$PLATFORM]}
    [ ! -d $DES_DIR ] &amp;&amp; sudo mkdir -p $DES_DIR
    sudo cp -rf $GIT_DESCRIBE/*   $DES_DIR
    [ $? -ne 0 ]&amp;&amp; exit -1
    ls -l $GIT_DESCRIBE
	sudo rm -fr $GIT_DESCRIBE
done

#sudo rm -fr build

# push the binary files to the ftpserver
#sudo python ../estuary_test/boot-app-scripts/publish.py -j open-estuary -p $PLATFORM -d ./$GIT_DESCRIBE

echo $GIT_DESCRIBE
cat &lt;&lt; EOF &gt; ${WORKSPACE}/env.properties
GIT_DESCRIBE=$GIT_DESCRIBE
EOF

echo $TFTP_DIR

cat ${WORKSPACE}/env.properties

cd ../..

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.16">
      <recipients>wuyanjun1027@163.com  </recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.29">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>TREE_NAME=$TREE_NAME
TFTP_DIR=$TFTP_DIR
GIT_DESCRIBE=$GIT_DESCRIBE</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>estuary-build-complete</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>
</project>