<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.28"/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TREE_NAME</name>
          <description>htsat@Jenkins-server:/var/lib/jenkins/jobs/open-estuary/workspace/local/open-estuary/build/D02</description>
          <defaultValue>open-estuary</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_PLATFORM</name>
          <description></description>
          <defaultValue>D02 D03</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_DISTRO</name>
          <description></description>
          <defaultValue>Ubuntu OpenSuse Fedora Debian CentOS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOOT_PLAN</name>
          <description></description>
          <defaultValue>boot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_PLAN</name>
          <description></description>
          <defaultValue>WEEKLY_TESTING BOOT_NFS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>USER</name>
          <description></description>
          <defaultValue>htsat</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HOST</name>
          <description></description>
          <defaultValue>114.119.4.74</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_SERVER</name>
          <description></description>
          <defaultValue>http://114.119.4.74:800/RPC2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_USER</name>
          <description></description>
          <defaultValue>default</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_STREAM</name>
          <description></description>
          <defaultValue>/anonymous/default/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_TOKEN</name>
          <description></description>
          <defaultValue>g43y0wtyi0m2ua7in3xtfch1m2s1dd0k97ac1fqqhqd0qblimtehqkwk8mjimsyh0jczrnaibdlb23mtn17qca6i14tcl27h7md580za5p8w81fl035b6bk1ybw26lle</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_TOKEN</name>
          <description></description>
          <defaultValue>3eda8013-da37-42ea-b9a0-7a66badd1b68</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_SERVER</name>
          <description></description>
          <defaultValue>http://114.119.4.74:8888/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_SERVER</name>
          <description></description>
          <defaultValue>http://114.119.4.74:808</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARCH_MAP</name>
          <description></description>
          <defaultValue>d03 arm64 d02 arm64</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TFTP_DIR</name>
          <description></description>
          <defaultValue>/var/lib/tftpboot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_DIR</name>
          <description></description>
          <defaultValue>/var/www/images/kernel-ci</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.4">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/open-estuary/ci-scripts.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>local/ci-scripts</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <depth>0</depth>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set -x

if [ ! -e opt ]; then
	mkdir opt
fi

cd opt

if [ ! -e gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz ]; then
	wget -q -c https://releases.linaro.org/15.02/components/toolchain/binaries/aarch64-linux-gnu/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
	tar -Jxf gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
else
    if [ ! -e gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu ]; then
        tar -Jxf gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu.tar.xz
    fi
fi

cd ..

CI_SCRIPTS_DIR=${WORKSPACE}/local/ci-scripts
pushd ${CI_SCRIPTS_DIR}/boot-app-scripts    # change current work directory

: ${SHELL_PLATFORM:=`python parameter_parser.py -f config.yaml -s Build -k Platform`}
: ${SHELL_DISTRO:=`python parameter_parser.py -f config.yaml -s Build -k Distro`}

: ${BOOT_PLAN:=`python parameter_parser.py -f config.yaml -s Jenkins -k Boot`}
: ${APP_PLAN:=`python parameter_parser.py -f config.yaml -s Jenkins -k App`}

: ${USER:=`python parameter_parser.py -f config.yaml -s LAVA -k USER`}
: ${HOST:=`python parameter_parser.py -f config.yaml -s LAVA -k HOST`}

: ${LAVA_SERVER:=`python parameter_parser.py -f config.yaml -s LAVA -k lavaserver`}
: ${LAVA_USER:=`python parameter_parser.py -f config.yaml -s LAVA -k lavauser`}
: ${LAVA_STREAM:=`python parameter_parser.py -f config.yaml -s LAVA -k lavastream`}
: ${LAVA_TOKEN:=`python parameter_parser.py -f config.yaml -s LAVA -k TOKEN`}

: ${KERNELCI_SERVER:=`python parameter_parser.py -f config.yaml -s Kernelci -k server`}
: ${KERNELCI_TOKEN:=`python parameter_parser.py -f config.yaml -s Kernelci -k token`}

: ${FTP_SERVER:=`python parameter_parser.py -f config.yaml -s Kernelci -k ftpserver`}

echo $ARCH_MAP
: ${ARCH_MAP:=`python parameter_parser.py -f config.yaml -s Arch`}
echo $ARCH_MAP

popd    # restore current work directory

echo $GIT_DESCRIBE
cat &lt;&lt; EOF &gt; ${WORKSPACE}/env.properties
GIT_DESCRIBE=$GIT_DESCRIBE
SHELL_PLATFORM=$SHELL_PLATFORM
SHELL_DISTRO=$SHELL_DISTRO
BOOT_PLAN=$BOOT_PLAN
APP_PLAN=$APP_PLAN
USER=$USER
HOST=$HOST
LAVA_SERVER=$LAVA_SERVER
LAVA_USER=$LAVA_USER
LAVA_STREAM=$LAVA_STREAM
LAVA_TOKEN=$LAVA_TOKEN
KERNELCI_SERVER=$KERNELCI_SERVER
KERNELCI_TOKEN=$KERNELCI_TOKEN
FTP_SERVER=$FTP_SERVER
ARCH_MAP=$ARCH_MAP
TFTP_DIR=$TFTP_DIR
EOF

cat ${WORKSPACE}/env.properties
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@1.92.1">
      <info>
        <propertiesFilePath>env.properties</propertiesFilePath>
        <propertiesContent>LANG=C
PATH=${WORKSPACE}/opt/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu/bin:${WORKSPACE}/local/ci-scripts/build-scripts:$PATH</propertiesContent>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

function build_image_for_sata()
{
    image_dir=$1
    defconfig_file=arch/arm64/configs/defconfig
    dts_file=arch/arm64/boot/dts/hisilicon/hip05-d02.dts

    cd kernel

    if [ -f ${defconfig_file}_bk ]; then
    	rm -fr ${defconfig_file}
        mv ${defconfig_file}_bk  ${defconfig_file}
    fi
    if [ -f ${dts_file}_bk ]; then
    	rm -fr ${dts_file}
        mv ${dts_file}_bk  ${dts_file}
    fi

    cp ${defconfig_file} ${defconfig_file}_bk
    cp ${dts_file} ${dts_file}_bk

    sed -i &apos;s/CONFIG_SATA_MV=m/CONFIG_SATA_MV=y/g&apos; ${defconfig_file}
    SATA_BOOT=&quot;rdinit=/init root=/dev/sda2 rootdelay=10 rootfstype=ext4 rw console=ttyS0,115200 earlycon=uart8250,mmio32,0x80300000 ip=dhcp&quot;
    SAS_BOOT=&quot;earlycon=uart8250,mmio32,0x80300000 console=ttyS0,115200 initrd=0x7000000,350M&quot;
    sed -i &quot;s#$SAS_BOOT#$SATA_BOOT#g&quot;  ${dts_file}

	make defconfig
    make -j $CPU_NUM
    cp ./arch/arm64/boot/Image  ../${image_dir}
    cp ./arch/arm64/boot/dts/hisilicon/hip05-d02.dtb  ../${image_dir}

    make clean
    rm -fr ${dts_file} &amp;&amp; mv ${dts_file}_bk ${dts_file}
    rm -fr ${defconfig_file} &amp;&amp; mv ${defconfig_file}_bk ${defconfig_file}

    cd ..
}

function print_time()
{
	echo  $@ `date &quot;+%Y-%m-%d %H:%M:%S&quot;` &gt;&gt; $timefile
}

set -x

export ARCH=arm64
export CROSS_COMPILE=${WORKSPACE}/opt/gcc-linaro-4.9-2015.02-3-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
export

CPU_NUM=$(cat /proc/cpuinfo | grep processor | wc -l)

CI_SCRIPTS_DIR=${WORKSPACE}/local/ci-scripts
OPEN_ESTUARY_DIR=${WORKSPACE}/local/open-estuary

timefile=${WORKSPACE}/timestamp.log
if [ -f $timefile ]; then
	rm -fr $timefile
else
	touch $timefile
fi

print_time &quot;the begin time is &quot;

# prepare repo tool
if [ ! -e bin ]; then 
	mkdir -p bin;
	wget -c http://www.open-estuary.com/EstuaryDownloads/tools/repo -O bin/repo
	chmod a+x bin/repo; 
fi

export PATH=${WORKSPACE}/bin:$PATH;

# get the newest content of git repos
if [ ! -e $OPEN_ESTUARY_DIR ]; then
	mkdir -p $OPEN_ESTUARY_DIR;
fi

pushd $OPEN_ESTUARY_DIR;    # change current work directory

repo abandon master
repo forall -c git reset --hard

if [ &quot;$VERSION&quot;x != &quot;&quot;x ]; then
	repo init -u &quot;https://github.com/open-estuary/estuary.git&quot; -b refs/tags/$VERSION --no-repo-verify --repo-url=git://android.git.linaro.org/tools/repo
else
	repo init -u &quot;https://github.com/open-estuary/estuary.git&quot; -b master --no-repo-verify --repo-url=git://android.git.linaro.org/tools/repo
fi

false; while [ $? -ne 0 ]; do repo sync; done
repo start master --all

print_time &quot;the end time of finishing downloading  estuary is &quot;

############## get the GIT_DESCRIBE ######################
if [ &quot;$VERSION&quot;x != &quot;&quot;x ]; then
	GIT_DESCRIBE=$VERSION
else
	#### get uefi commit
	pushd uefi
	UEFI_GIT_DESCRIBE=&apos;uefi_&apos;$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
	popd

	#### get kernel commit
	pushd kernel
	KERNEL_GIT_DESCRIBE=&apos;kernel_&apos;$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
	popd

	#### get grub commit 
	pushd grub
	GURB_GIT_DESCRIBE=&apos;grub_&apos;$(git log --oneline | head -1 | awk &apos;{print $1}&apos;)
	popd

	GIT_DESCRIBE=$UEFI_GIT_DESCRIBE&quot;_&quot;$GURB_GIT_DESCRIBE&quot;_&quot;$KERNEL_GIT_DESCRIBE
fi
############## END of GIT_DESCRIBE ######################

if [ -d $GIT_DESCRIBE ]; then
	sudo rm -fr $GIT_DESCRIBE
fi

mkdir $GIT_DESCRIBE

read -a arch &lt;&lt;&lt; $(echo $ARCH_MAP)
declare -A dict
for((i=0; i&lt;${#arch[@]}; i++))
do
    if ((i%2==0)); then
        j=`expr $i+1`
        dict[${arch[$i]}]=${arch[$j]}
    fi      
done

# unset HOST variable to fix acpica compile error for the first build
HOST_BAK=$HOST
unset HOST

echo $SHELL_PLATFORM
echo $SHELL_DISTRO

for PLATFORM in $SHELL_PLATFORM
do
	echo $PLATFORM
	PLATFORM_L=&quot;$(echo $PLATFORM | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)&quot;
    echo ${dict[$PLATFORM_L]}

    DISTRO_DIR=$GIT_DESCRIBE/${PLATFORM_L}-${dict[$PLATFORM_L]}
    [ -d $DISTRO_DIR ] &amp;&amp; rm -fr $DISTRO_DIR
    mkdir -p $DISTRO_DIR

	for DISTRO in $SHELL_DISTRO
    do
        echo $DISTRO

        pushd ${CI_SCRIPTS_DIR}/boot-app-scripts
        plat_distros=`python parameter_parser.py -f config.yaml  -s DISTRO -k $PLATFORM`
        distro_whole_name=`python parameter_parser.py -f config.yaml  -s DISTRO -k $PLATFORM -v $DISTRO`
        popd

        [[ ${plat_distros/$DISTRO//} == $plat_distros ]] &amp;&amp; continue

		./estuary/build.sh -p $PLATFORM -d $DISTRO
		if [ $? -ne 0 ]; then
			exit -1
		fi
        
     	 # delete the link file in the build/$PLATFORM
     	 delete_file=$(ls -l ./build/$PLATFORM/binary | grep &quot;\-&gt;&quot; | awk &apos;{print $9}&apos;)
     	 echo $delete_file
      
     	 declare -a del_arr
    	 read -a del_arr &lt;&lt;&lt; $(echo $delete_file)
      
    	 for j in ${del_arr[@]}
    	 do
    	      sudo rm -fr ./build/$PLATFORM/binary/$j 
   	  	 done
      
      	if [  x&quot;$PLATFORM&quot; = x&quot;D02&quot; ]; then
        	sata_image_dir=sata_image
        	[ -d $sata_image_dir ] &amp;&amp; rm -fr $sata_image_dir
            mkdir $sata_image_dir
        	build_image_for_sata   $sata_image_dir
            if [ &quot;`ls -A $sata_image_dir`&quot; = &quot;&quot;  ]; then
            	echo &quot;xompiling the sata booting image error&quot;
                exit -1
            else
            	[ -d build/$PLATFORM/binary/$sata_image_dir ] &amp;&amp; rm -fr build/$PLATFORM/binary/$sata_image_dir
            	mv $sata_image_dir build/$PLATFORM/binary
            fi
        fi
      
      	# move the build file to the $GIT_DESCRIBE file
      	ls -l build
        if [ ! -d $DISTRO_DIR/binary ]; then
        	sudo cp -r build/$PLATFORM/binary  $DISTRO_DIR
      	fi
        
      	if [ ! -d $DISTRO_DIR/toolchain ]; then
      	  	sudo cp -r build/$PLATFORM/toolchain  $DISTRO_DIR
      	fi
        
      	if [ ! -d $DISTRO_DIR/distro ]; then
      		sudo mkdir -p $DISTRO_DIR/distro
      	fi
        
      	sudo cp distro/${distro_whole_name}*  $DISTRO_DIR/distro
        print_time &quot;the end time of building $DISTRO is &quot;
    done
    
    print_time &quot;the end time of building for $PLATFORM is &quot;
    
    DES_DIR=$FTP_DIR/$TREE_NAME/$GIT_DESCRIBE/
    [ ! -d $DES_DIR ] &amp;&amp; sudo mkdir -p $DES_DIR
    
    sudo cp -rf $GIT_DESCRIBE/* $DES_DIR
    [ $? -ne 0 ] &amp;&amp; exit -1
    
    ls -l $GIT_DESCRIBE
	sudo rm -fr $GIT_DESCRIBE
done

HOST=$HOST_BAK    # restore HOST variable

sudo cp -rf $timefile $DES_DIR
sudo rm -fr $timefile
#sudo rm -fr build

popd    # restore current work directory

# push the binary files to the ftpserver
#sudo python ${CI_SCRIPTS_DIR}/boot-app-scripts/publish.py -j open-estuary -p $PLATFORM -d ./$GIT_DESCRIBE

echo $GIT_DESCRIBE
cat &lt;&lt; EOF &gt; ${WORKSPACE}/env.properties
GIT_DESCRIBE=$GIT_DESCRIBE
SHELL_PLATFORM=$SHELL_PLATFORM
SHELL_DISTRO=$SHELL_DISTRO
BOOT_PLAN=$BOOT_PLAN
APP_PLAN=$APP_PLAN
USER=$USER
HOST=$HOST
LAVA_SERVER=$LAVA_SERVER
LAVA_USER=$LAVA_USER
LAVA_STREAM=$LAVA_STREAM
LAVA_TOKEN=$LAVA_TOKEN
KERNELCI_SERVER=$KERNELCI_SERVER
KERNELCI_TOKEN=$KERNELCI_TOKEN
FTP_SERVER=$FTP_SERVER
ARCH_MAP=$ARCH_MAP
TFTP_DIR=$TFTP_DIR
EOF

cat ${WORKSPACE}/env.properties
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.17">
      <recipients>wuyanjun1027@163.com  fanghuangcai@163.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.30">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>${WORKSPACE}/env.properties</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>estuary-build-complete</projects>
          <condition>UNSTABLE_OR_BETTER</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.2"/>
  </buildWrappers>
</project>