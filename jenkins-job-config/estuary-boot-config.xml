<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.28"/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>3000</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TREE_NAME</name>
          <description></description>
          <defaultValue>open-estuary</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_DESCRIBE</name>
          <description></description>
          <defaultValue>v2.2-rc0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_PLATFORM</name>
          <description></description>
          <defaultValue>D02 D03</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SHELL_DISTRO</name>
          <description></description>
          <defaultValue>Ubuntu OpenSuse Fedora Debian CentOS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOOT_PLAN</name>
          <description></description>
          <defaultValue>boot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_PLAN</name>
          <description></description>
          <defaultValue>WEEKLY_TESTING BOOT_NFS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>USER</name>
          <description></description>
          <defaultValue>htsat</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HOST</name>
          <description></description>
          <defaultValue>192.168.1.106</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.1.106/RPC2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_USER</name>
          <description></description>
          <defaultValue>default</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_STREAM</name>
          <description></description>
          <defaultValue>/anonymous/default/</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAVA_TOKEN</name>
          <description></description>
          <defaultValue>p53l26plbujbqaicsrkw0i1u3xu5qawxlx3imr41w3eiwg1y79jxtjkx209p2kccsc1obzy279c7ruydhskzotdlf6s3me0wb87o0rf71m0sehetlje9p0cr0dorkhf8</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.1.108:8083</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_SERVER</name>
          <description></description>
          <defaultValue>http://192.168.1.108:8888</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELCI_TOKEN</name>
          <description></description>
          <defaultValue>3eda8013-da37-42ea-b9a0-7a66badd1b68</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ARCH_MAP</name>
          <description></description>
          <defaultValue>d03 arm64 d02 arm64 d01 arm32</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TFTP_DIR</name>
          <description></description>
          <defaultValue>/var/lib/tftpboot</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FTP_DIR</name>
          <description></description>
          <defaultValue>/var/www/images/kernel-ci</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <refspec>+refs/heads/master:refs/remotes/origin/master</refspec>
        <url>https://github.com/open-estuary/ci-scripts.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.AssemblaWeb">
      <url></url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>local/lava-ci</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <reference></reference>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set -x

export 

BOOT_LOC=/targetNFS/ubuntu_for_deployment/sys_setup/bin

function generate_jobs()
{
	test_name=$1
    distro=$2
    harddisk_flag=$3
   	rm -fr  jobs  results
	for PLAT in $SHELL_PLATFORM 
	do
    	board_arch=${dict[$PLAT]}
        if [ x&quot;$distro&quot; != x&quot;&quot; ]; then
    		python lava-kernel-ci-job-creator.py $FTP_SERVER/${TREE_NAME}/${GIT_DESCRIBE}/${PLAT}-${board_arch}/ --plans $test_name --distro $distro $harddisk_flag
        else 
        	python lava-kernel-ci-job-creator.py $FTP_SERVER/${TREE_NAME}/${GIT_DESCRIBE}/${PLAT}-${board_arch}/ --plans $test_name 
        fi
   		if [ $? -ne 0 ]; then
    		echo &quot;create the boot jobs error! Aborting&quot;
       		return -1
    	fi
	done
}

function run_and_report_jobs()
{
	cd jobs
	python ../lava-job-runner.py --username $LAVA_USER --token $LAVA_TOKEN --server $LAVA_SERVER --stream $LAVA_STREAM --poll POLL
	cd ..
	if [ ! -f jobs/results/POLL ]; then
		echo &quot;Running the boot jobs error! Aborting&quot;
    	return -1
	fi
	python lava-report.py --boot jobs/results/POLL --lab $LAVA_USER --api $KERNELCI_SERVER --token $KERNELCI_TOKEN

	if [ ! -d results ]; then
		echo &quot;running the boot jobs error! Aborting&quot; 
		return -1
	fi
}

function judge_pass_or_not()
{
	FAIL_FLAG=$(grep -R &apos;FAIL&apos; ./jobs/results/POLL)
	if [ &quot;$FAIL_FLAG&quot;x != &quot;&quot;x ]; then
		echo &quot;boot job fail&quot;
	    return -1
	fi

	PASS_FLAG=$(grep -R &apos;PASS&apos; ./jobs/results/POLL)
	if [ &quot;$PASS_FLAG&quot;x = &quot;&quot;x ]; then
		echo &quot;boot job fail&quot;
	    return -1
	fi
}

function run_and_move_result()
{
    run_and_report_jobs 
	[ $? -ne 0 ] &amp;&amp; return -1
	judge_pass_or_not
	[ $? -ne 0 ] &amp;&amp; return -1
	test -d results  &amp;&amp; mv results results_$1
	test -d jobs  &amp;&amp; mv jobs jobs_$1
    [ ! -d $2 ]&amp;&amp; mkdir -p $2
    test -d jobs_$1 &amp;&amp; mv jobs_$1 $2
	test -d results_$1 &amp;&amp; mv results_$1 $2
}


function print_time()
{
	echo $@   &gt;&gt; $timefile
}

#######  Begining the tests ######
timefile=&quot;timestamp_bk.log&quot;
current_path=$(pwd)
set +x
DEVCCE_IP=&apos;device_ip_type.txt&apos;

cd local/lava-ci/boot-app-scripts
rm -fr jobs

test -d $GIT_DESCRIBE &amp;&amp; rm -fr $GIT_DESCRIBE

read -a arch &lt;&lt;&lt; $(echo $ARCH_MAP)
declare -A dict
for((i=0; i&lt;${#arch[@]}; i++))
do
    if ((i%2==0)); then
        j=`expr $i+1`
        dict[${arch[$i]}]=${arch[$j]}
    fi      
done

SHELL_PLATFORM=&quot;$(echo $SHELL_PLATFORM | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;)&quot;


if [ -f ${timefile} ]; then
	rm -fr  $timefile
else
	touch $timefile
fi
print_time &quot;the begin time of boot test is &quot; `date &quot;+%Y-%m-%d %H:%M:%S&quot;`

##### copy some files to the lava-server machine to support the boot process #####
set -x
set -e
echo $TFTP_DIR
scp download_all_file.py download_distros.sh  $USER@$HOST:$TFTP_DIR
if [ $? -ne 0 ]; then
	echo &apos;Downloading binaries failed&apos;
    exit -1
fi
ssh $USER@$HOST  &quot;cd $TFTP_DIR; test -d download &amp;&amp; rm -fr download; mkdir download;&quot;
ssh $USER@$HOST  &quot;cd $TFTP_DIR/download; python ../download_all_file.py -u $FTP_SERVER -t $KERNELCI_TOKEN -d $GIT_DESCRIBE -j $TREE_NAME;&quot;
ssh $USER@$HOST &quot;cd $TFTP_DIR/download; cp -rf *dtb sata_image ~/;  rm -fr download_all_file.py; &quot;
ssh jenkins@$HOST &quot;cd $TFTP_DIR/download; sudo cp -f *.dtb *Image* $BOOT_LOC;&quot;
if [ $? -ne 0 ]; then
	echo &apos;Can not login the tftp server&apos;
    exit -1
fi
for DISTRO in $SHELL_DISTRO;
do
	for PLAT in $SHELL_PLATFORM;
    do
    	board_arch=${dict[$PLAT]}
        URL_NAME=$FTP_SERVER/${TREE_NAME}/${GIT_DESCRIBE}/${PLAT}-${board_arch}
		ssh jenkins@$HOST  &quot;cd $TFTP_DIR; sudo ./download_distros.sh $DISTRO $URL_NAME ${board_arch} $PLAT&quot;
    done
done
set +e
##### Finish copying files to the lava-server machine #####

[ -d $GIT_DESCRIBE/results ]&amp;&amp; rm -fr $GIT_DESCRIBE/results
mkdir -p $GIT_DESCRIBE/results

rm -fr jobs*
rm -fr results*
print_time &quot;the time of preparing all envireonment is &quot; `date &quot;+%Y-%m-%d %H:%M:%S&quot;`
for DISTRO in $SHELL_DISTRO; 
do
	[ -d $DISTRO ] &amp;&amp; rm -fr $DISTRO
    mkdir $DISTRO
	# generate the boot jobs for all the targets
	if [ &apos;$BOOT_PLAN&apos;x != &apos;&apos;x ]; then
		generate_jobs $BOOT_PLAN $DISTRO
		# create the boot jobs for each target and run all these jobs
        [ $? -ne 0 ] &amp;&amp; continue
        cd jobs
		python ../create_boot_job.py --username $LAVA_USER --token $LAVA_TOKEN --server $LAVA_SERVER --stream $LAVA_STREAM
		if [ $? -ne 0 ]; then
			echo &quot;generate the jobs according the board devices error! Aborting&quot;
			continue
		fi
		cd ..
    	if [ -d jobs ]; then
			run_and_move_result $BOOT_PLAN $DISTRO
            [ $? -ne 0 ] &amp;&amp; python parser.py  -d $DISTRO  &amp;&amp;  mv $DISTRO $GIT_DESCRIBE/results &amp;&amp; continue 
    	fi
	fi 
	print_time &quot;the end time of deploy $DSITRO in PXE is &quot; `date &quot;+%Y-%m-%d %H:%M:%S&quot;`
	#########################################
	##### Entering the sata disk rootfs #####
	BOOT_FOR_TEST=BOOT_SATA
	# generate the boot jobs for all the target
    	generate_jobs $BOOT_FOR_TEST $DISTRO &quot;--SasFlag&quot;
    	[ $? -ne 0 ] &amp;&amp; continue
        cd jobs
		python ../create_boot_job.py --username $LAVA_USER --token $LAVA_TOKEN --server $LAVA_SERVER --stream $LAVA_STREAM
		if [ $? -ne 0 ]; then
			echo &quot;generate the jobs according the board devices error! Aborting&quot;
            cd ..
			python parser.py  -d $DISTRO  &amp;&amp;  mv $DISTRO $GIT_DESCRIBE/results &amp;&amp; continue 
		fi
		cd ..
	if [ -d jobs ]; then
		run_and_move_result $BOOT_FOR_TEST $DISTRO
        [ $? -ne 0 ] &amp;&amp;  python parser.py  -d $DISTRO  &amp;&amp;  mv $DISTRO $GIT_DESCRIBE/results &amp;&amp; continue 
	fi
    print_time &quot;the end time of boot $DSITRO fromhard disk is &quot; `date &quot;+%Y-%m-%d %H:%M:%S&quot;`
	##### End of entering the sata disk #####
	#########################################


	#####  modify the ip address according to the boot information
	ssh $HOST -l $USER  &quot;cd /etc/lava-dispatcher/devices; rm -fr $DEVCCE_IP&quot;
	scp $DISTRO/results_${BOOT_FOR_TEST}/${LAVA_USER}/${DEVCCE_IP} $USER@$HOST:/etc/lava-dispatcher/devices
	scp modify_conf_file.sh  $USER@$HOST:/etc/lava-dispatcher/devices
	ssh $HOST -l $USER  &quot;cd /etc/lava-dispatcher/devices; ./modify_conf_file.sh&quot;
    if [ $? -ne 0 ]; then
    	echo &quot;create ip and host mapping error! Aborting&quot;
       	python parser.py  -d $DISTRO  &amp;&amp;  mv $DISTRO $GIT_DESCRIBE/results &amp;&amp; continue 
    fi

	# generate the application jobs for the board_types 
	for app_plan in $APP_PLAN
	do
		[[ $app_plan =~ &quot;BOOT&quot; ]] &amp;&amp; continue
    	generate_jobs $app_plan
        [ $? -ne 0 ] &amp;&amp; python parser.py  -d $DISTRO  &amp;&amp;  mv $DISTRO $GIT_DESCRIBE/results &amp;&amp; continue 
	done
	if [ -d jobs ]; then
		run_and_move_result app $DISTRO
		[ $? -ne 0 ] &amp;&amp; python parser.py  -d $DISTRO  &amp;&amp;  mv $DISTRO $GIT_DESCRIBE/results &amp;&amp; continue 
	fi
    print_time &quot;the end time of running app is &quot; `date &quot;+%Y-%m-%d %H:%M:%S&quot;`
	python parser.py  -d $DISTRO
    mv $DISTRO $GIT_DESCRIBE/results
done
##################################
DES_TMP=boot_results
[ -d $DES_TMP ] &amp;&amp; rm -fr $DES_TMP
mkdir $DES_TMP
# generate the application jobs for the board_types 
for app_plan in $APP_PLAN
do
    [[ $app_plan =~ &quot;BOOT&quot; ]] &amp;&amp; generate_jobs $app_plan
    [ ! -d jobs ] &amp;&amp; continue
done
if [ -d jobs ]; then
	run_and_report_jobs 
	[ $? -ne 0 ] &amp;&amp; exit -1
	test -d jobs &amp;&amp; mv jobs $DES_TMP
	test -d results &amp;&amp; mv results $DES_TMP
    python parser.py -d $DES_TMP
    mv $DES_TMP $GIT_DESCRIBE/results
    print_time &quot;the end time of running boot tasks is &quot; `date &quot;+%Y-%m-%d %H:%M:%S&quot;`
fi 
##################################
mv $timefile $GIT_DESCRIBE

# push the binary files to the ftpserver
#sudo python publish.py -j $TREE_NAME -d ./$GIT_DESCRIBE
DES_DIR=$FTP_DIR/$TREE_NAME/$GIT_DESCRIBE/
[ ! -d $DES_DIR ] &amp;&amp; echo &quot;Don&apos;t have the images and dtbs&quot; &amp;&amp; exit -1
cd $GIT_DESCRIBE
python ../parser.py -s results
cd ..
sudo cp -rf $GIT_DESCRIBE/*   $DES_DIR
sudo rm -fr $GIT_DESCRIBE
[ $? -ne 0 ]&amp;&amp; exit -1

cd $current_path
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.16">
      <recipients>wuyanjun1027@163.com  1124281517@qq.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.7.2"/>
  </buildWrappers>
</project>